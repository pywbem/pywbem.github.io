/*
 * JavaScript support for CMPI pages project.
 *
 * Prerequisites:
 *  jquery.js V1.x from http://jquery.com/
 */

/*
 * This function loads a HTML file and adds its top element as a child node of
 * a target node, identified by its ID.
 *
 * Parameters:
 *   @param url (string): URL of the HTML file to be loaded.
 *   @param id (string): ID of the target element.
 */
function load_url_into_id(url, id)
{
  $(window).load(function() {
    $('#' + id).load(url);
  });
}

/*
 * This function generates a link to an element in the PyWBEM Client
 * documentation. The link is generated as an <a> element, which is inserted
 * before the <script> element that invokes this function.
 *
 * The implementation of this function is aware of the format generated by
 * the documentation generator tool (in this case Epydoc). The intention is
 * that the caller of this function does not have to have any knowledge about
 * the documentationgenerator tool that is used.
 *
 * Parameters:
 *   @param label (string): label to show for the link
 *   @param kind (string): kind of the element. Supported are: 'class',
 *          'module', 'method'.
 *   @param name (string): name of the element, including its package path,
 *          starting with the pywbem package. For example,
 *          'pywbem.cim_operations.WBEMConnection' for a class, or
 *          'pywbem.cim_types' for a module, or
 *          'pywbem.cim_operations.WBEMConnection.GetInstance' for a method.
 */
function doc_link(kind, name, label)
{
  var script = document.currentScript;

  var doc_base = "pywbem/doc/latest/doc/"; // Relative URL of documentation base

  // Below the documentation base, the remainders of the URLs look like:
  //   pywbem.cim_obj-module.html
  //   pywbem.cim_obj.CIMProperty-class.html
  //   pywbem.cim_operations.WBEMConnection-class.html#GetInstance

  var file;
  if (kind == 'module') {
    file = name + '-module.html';
  }
  else if (kind == 'class') {
    file = name + '-class.html';
  }
  else if (kind == 'method') {
    var parts = name.match(/(.*)\.(\w+)/);
    file = parts[1] + '-class.html#' + parts[2];
  }
  else {
    file = "error-invalid-kind-" + kind;
  }

  var a = document.createElement("a");
  a.href = doc_base + file;
  var tt = document.createElement("tt");
  a.appendChild(tt)
  tt.innerHTML = label;

  var currentScript = document.currentScript || (function() {
    var scripts = document.getElementsByTagName('script');
    return scripts[scripts.length - 1];
  })();
  currentScript.parentNode.insertBefore(a, currentScript);
}

